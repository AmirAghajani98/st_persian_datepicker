Metadata-Version: 2.4
Name: st-persian-datepicker
Version: 0.1.0
Summary: Persian (Jalali) date picker component for Streamlit
Author-email: Your Name <you@example.com>
License: MIT
Project-URL: Homepage, https://example.com/st-persian-datepicker
Project-URL: Repository, https://example.com/your-repo
Keywords: streamlit,jalali,persian,datepicker,component
Classifier: Development Status :: 4 - Beta
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Framework :: Streamlit
Classifier: Topic :: Software Development :: User Interfaces
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: streamlit>=1.25
Requires-Dist: jdatetime>=5.0.0
Dynamic: license-file

````markdown
# st-persian-datepicker

[![PyPI version](https://badge.fury.io/py/st-persian-datepicker.svg)](https://pypi.org/project/st-persian-datepicker/)
[![Python Versions](https://img.shields.io/pypi/pyversions/st-persian-datepicker.svg)](https://pypi.org/project/st-persian-datepicker/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](LICENSE)

A simple **Jalali (Persian) DatePicker** component for [Streamlit](https://streamlit.io/).

---

## Installation

From PyPI (after publishing):

```bash
pip install st-persian-datepicker
```
````

Or locally (from a zip file):

```bash
pip install st-persian-datepicker-0.1.0.zip
```

Or in development mode (inside the project folder):

```bash
pip install -e .
```

---

## Usage

```python
import streamlit as st
from st_persian_datepicker import date_picker
import datetime as dt
import jdatetime

st.set_page_config(page_title="Jalali DatePicker Demo", layout="centered")

st.header("Select Date (Jalali)")

# Provide a default value using a Gregorian ``date``. It will be converted
# automatically to a Jalali date string for display. You can also pass a
# ``jdatetime.date``/``jdatetime.datetime`` instance or a Jalali string
# directly.
default_dt = dt.date(2025, 4, 27)

d = date_picker(
    label="Birthdate",
    default=default_dt,
    format="YYYY/MM/DD",
    time_picker=False,
    key="birthdate",
    # Choose the return type: "str" (default), "jalali" or "gregorian"
    output="jalali",
)

st.write("Selected value:", d)
```

---

## Limitations & Notes

- **Date range:** For `min_date` and `max_date`, pass values as _Unix time (ms)_. Example:

  ```python
  import datetime as dt
  min_ms = int(dt.datetime(2025, 1, 1).timestamp() * 1000)
  max_ms = int(dt.datetime(2026, 1, 1).timestamp() * 1000)
  date_picker(min_date=min_ms, max_date=max_ms)
  ```

* **Return value:** The returned type depends on the ``output`` parameter.  By default
  (`output="str"`) the component returns a **Jalali date string** according to
  `format`.  With `output="jalali"` a ``jdatetime.date`` or ``jdatetime.datetime`` is
  returned, and with `output="gregorian"` a ``datetime.date`` or ``datetime.datetime``
  in the Gregorian calendar is returned.  If `time_picker=True`, the time portion is
  included in the returned object (except when returning a simple date string).

- **Frontend:** For more advanced frontend functionality, you may replace the bundled HTML/JS with a custom React/TypeScript implementation.

---

## Development

- In `st_persian_datepicker/__init__.py`, set `_RELEASE = False` and point `url` to your dev server for local development.
- The current version loads dependencies (jQuery, persian-date, persian-datepicker) from a CDN.

---

## License

This project is licensed under the [MIT License](LICENSE).

---

## Distribution & Publishing

This project is ready to be packaged and published to [PyPI](https://pypi.org/).
Follow the steps below to build and publish.

### Prerequisites

- Python 3.8+
- A virtual environment (recommended)
- `build` and `twine` installed

### Build distributions

```bash
cd /path/to/st_persian_datepicker
python3 -m venv .venv
source .venv/bin/activate
python3 -m pip install --upgrade pip build twine

python -m build
```

This will create `dist/*.tar.gz` and `dist/*.whl`.

### Upload to TestPyPI

1. Create an account at [TestPyPI](https://test.pypi.org/).
2. Obtain an API token (recommended).
3. Upload:

```bash
export TWINE_USERNAME="__token__"
export TWINE_PASSWORD="pypi-AgENd..."
python -m twine upload --repository-url https://test.pypi.org/legacy/ dist/*
```

### Install from TestPyPI

```bash
pip install --index-url https://test.pypi.org/simple/ --no-deps st-persian-datepicker
```

### Upload to PyPI

1. Create an API token from [PyPI](https://pypi.org/).
2. Upload:

```bash
export TWINE_USERNAME="__token__"
export TWINE_PASSWORD="pypi-AgENd..."
python -m twine upload dist/*
```

---

## CI/CD & Automation

- A sample script is provided in `scripts/publish_to_testpypi.sh`.
- Never commit API tokens. Use environment variables or CI secrets (e.g. GitHub Actions Secrets).

---

## Roadmap

- [ ] Return datetime object instead of string
- [ ] Add built-in time picker support in output
- [ ] Replace jQuery dependencies with native React/TypeScript implementation
